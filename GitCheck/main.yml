name: Run External Script on PR

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  run-external-script:
    runs-on: ubuntu-latest
    steps:
     
      - name: Checkout current repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Checkout external repository
        uses: actions/checkout@v3
        with:
          repository: mruizgdd/gddy_coriander_secu_hackathon_2024
          path: coriander
          ref: main
          token: ${{secrets.CORIANDER_TOKEN}}

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r coriander/requirements.txt
          
      - name: Run external script with PR diff
        run: |
          python coriander/CoreApp/codeDiff.py ${{github.event.pull_request.base.sha}} ${{github.event.pull_request.head.sha}}

      - name: Run promptWithToken script
        run: python coriander/CoreApp/promptWithToken.py

      - name: Check report file
        id: check_report
        run: |
          if [ -s coriander_report_file.txt ]; then
            if grep -q '"coriander_status": "passed"' coriander_report_file.txt; then
              echo "The check has passed."
              echo "status=success" >> $GITHUB_OUTPUT
            else
              echo "The check has failed."
              cat coriander_report_file.txt
              echo "status=failure" >> $GITHUB_OUTPUT
              exit 1
            fi
          else
            echo "The check has failed. Report file not found."
            echo "status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Update PR status
        if: always()
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: '${{ steps.check_report.outputs.status }}',
              target_url: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}',
              description: 'Report check ${{ steps.check_report.outputs.status }}',
              context: 'Report Check'
            })
